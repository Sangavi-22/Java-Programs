package Menu;
import Model.*;
import View.*;
import Controller.*;
import Payment.*;
import Input.InputsFromUser;
public class StudentMenu {
    private long fine=0;
    private final StudentAccountController studentAccountController;
    private final LibraryModel libraryModel=LibraryModel.getInstance();
    private final LibraryView libraryView=new LibraryView();
    private final LibraryController libraryController=new LibraryController(libraryModel,libraryView);
    private InputsFromUser inputsFromUser;
    public StudentMenu(StudentAccountController studentAccountController, InputsFromUser inputsFromUser){
        this.studentAccountController=studentAccountController;
        this.inputsFromUser=inputsFromUser;
    }
    public void Menu() {
        long fine = 0;
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
        System.out.println();
        System.out.println("*******************************************************");
        System.out.println("!                  WELCOME STUDENT                    !");
        System.out.println("*******************************************************");
        System.out.println("!                Enter 1 to view Books                !");
        System.out.println("!                Enter 2 to borrow Books              !");
        System.out.println("!                Enter 3 to return Books              !");
        System.out.println("!                Enter 4 to renew Books               !");
        System.out.println("!                Enter 5 to search Books              !");
        System.out.println("!                Enter 6 to pay Fine                  !");
        System.out.println("!                Enter 7 to view Profile              !");
        System.out.println("!                Enter 8 to remove Account            !");
        System.out.println("!                Enter 9 to Logout                    !");
        System.out.println("!             Enter 10 to View Library HelpLine       !");
        System.out.println("*******************************************************");
        System.out.println();
        int userChoice =inputsFromUser.inputChoice();
        BookController bookController;
        switch (StudentActions.values()[userChoice-1]) {
            case ViewBooks:
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
                System.out.println();
                System.out.println("#######################################################");
                System.out.println("!                     VIEW BOOKS                      !");
                System.out.println("#######################################################");
                libraryController.viewBooks();
                System.out.println("################### END OF VIEW BOOKS #################");
                System.out.println();
                Menu();
                break;
            case BorrowBooks:
                if(studentAccountController.getBorrowedCount()>5) {
                    System.out.println("You have exceeded the maximum limit of books that can be borrowed.");
                }
                else {
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                        throw new RuntimeException(e);
                    }
                    System.out.println();
                    System.out.println("#######################################################");
                    System.out.println("!                   BORROW BOOKS                      !");
                    System.out.println("#######################################################");
                    int id = inputsFromUser.inputBookIdFromUser();
                    boolean found=libraryController.borrowBook(id,studentAccountController);
                    if(found) {
                        System.out.println("Thank you please return the book on time");
                    }
                    else{
                        System.out.println("Book unavailable. Please try after some time.");
                    }
                    System.out.println("################### END OF BORROW BOOKS ###############");
                    System.out.println();
                }
                Menu();
                break;
            case ReturnBooks:
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
                System.out.println();
                System.out.println("#######################################################");
                System.out.println("!                   RETURN BOOKS                      !");
                System.out.println("#######################################################");
                int id=inputsFromUser.inputBookIdFromUser();
                this.fine=libraryController.returnBook(id)*10;
                if(this.fine<0) {
                    System.out.println("You have to pay a fine of Rs."+(this.fine*(-1)));
                }
                else {
                    System.out.println("Thank you");
                }
                System.out.println("################### END OF RETURN BOOKS ###############");
                System.out.println();
                Menu();
                break;
            case RenewBooks:
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
                System.out.println();
                System.out.println("#######################################################");
                System.out.println("!                    RENEW BOOKS                      !");
                System.out.println("#######################################################");
                id=inputsFromUser.inputBookIdFromUser();
                boolean renewed=libraryController.renewBook(id);
                if(renewed==true) {
                    System.out.println("Book Renewed");
                }
                else {
                    System.out.println("Book cannot be renewed. You have to return the book.");
                }
                System.out.println("################### END OF RENEW BOOKS ################");
                System.out.println();
                Menu();
                break;
            case SearchBooks:
                System.out.println("1.Search by id\n2.Search by name\n3.Search bu author name");
                int userChoiceForSearching=inputsFromUser.inputChoice();
                switch(SearchingOptions.values()[userChoiceForSearching-1]) {
                    case SearchById:
                        try {
                            Thread.sleep(1000);
                        } catch (InterruptedException e) {
                            throw new RuntimeException(e);
                        }
                        System.out.println();
                        System.out.println("#######################################################");
                        System.out.println("!                    SEARCH BOOKS                     !");
                        System.out.println("#######################################################");
                        System.out.println();
                        id=inputsFromUser.inputBookIdFromUser();
                        if (libraryController.containsId(id)) {
                            bookController = libraryController.returnObject(id);
                            bookController.updateView();
                        }
                        else{
                            System.out.println("Book not found");
                        }
                        System.out.println("################### END OF SEARCH BOOKS ###############");
                        System.out.println();
                        break;
                    case SearchByName:
                        try {
                            Thread.sleep(1000);
                        } catch (InterruptedException e) {
                            throw new RuntimeException(e);
                        }
                        System.out.println();
                        System.out.println("#######################################################");
                        System.out.println("!                    SEARCH BOOKS                     !");
                        System.out.println("#######################################################");
                        System.out.println();
                        String bookName=inputsFromUser.inputBookName();
                        libraryController.searchBookByItsName(bookName);
                        System.out.println("################### END OF SEARCH BOOKS ###############");
                        System.out.println();
                        break;
                    case SearchByAuthor:
                        try {
                            Thread.sleep(1000);
                        } catch (InterruptedException e) {
                            throw new RuntimeException(e);
                        }
                        System.out.println();
                        System.out.println("#######################################################");
                        System.out.println("!                    SEARCH BOOKS                     !");
                        System.out.println("#######################################################");
                        System.out.println();
                        String authorName=inputsFromUser.inputAuthorName();
                        libraryController.searchBookByItsAuthorName(authorName);
                        System.out.println("################### END OF SEARCH BOOKS ###############");
                        break;
                    default:
                        System.out.println("Insufficient details to search");
                        break;
                }
                Menu();
                break;
            case PayFine:
                if(this.fine<0) {
                    System.out.println("1. Pay using card\n2. Pay using googlePay");
                    PaymentOperation payment;
                    int choice = inputsFromUser.inputChoice();
                    switch (choice) {
                        case 1:
                            String cardNumber=inputsFromUser.inputAccountId();
                            payment = new Card();
                            payment.transferAmount(cardNumber);
                            break;
                        case 2:
                            String googlePayId = inputsFromUser.inputGooglePayId();
                            payment= new GooglePay();
                            payment.transferAmount(googlePayId);
                            break;
                        default:
                            System.out.println("Please pay the fine soon");
                    }
                }
                else{
                    System.out.println("No fine due");
                }
                Menu();
                break;
            case ViewProfile:
                studentAccountController.updateView();
                Menu();
                break;
            case RemoveAccount:
                System.out.println("Enter the username and userId to remove");
                String userName=inputsFromUser.inputUserName();
                LibraryMenu.removeUser(userName);
                Menu();
                break;
            case LogOut:
                LibraryMenu.logOut();
                break;
            case ViewHelpLine:
                libraryController.updateView();
                Menu();
                break;
            default:
                System.out.println("Invalid choice");
                break;
        }
    }
}
