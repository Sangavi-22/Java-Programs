package LoginManagement;
import Administator.Admin;
import ProfileManagement.Librarian;
import ProfileManagement.Student;
import Validation.ValidateInput;
import java.util.HashMap;
import java.util.Scanner;
public class LoginOperations {
    private int id;
    private static String accountName;
    private String userName,password,name,passkey,userInput,userId;
    private static HashMap<String,String> loginDetails=new HashMap<>();
    private Admin admin=new Admin();
    private ValidateInput validate=new ValidateInput();
    Scanner input =new Scanner(System.in);
    public void manageLogin() {
        System.out.println("**********WELCOME TO LIBRARY MANAGEMENT SYSTEM**********\n");
        System.out.println("Enter 1 to Signup\nEnter 2 to Login");
        int loginChoice = getChoice();
        switch (loginChoice) {
            case 1:
                userName = getUserName();
                password = getPassword();
                if(loginDetails.containsKey(userName)) {
                    System.out.println("User Already Exist. Reenter your details");
                    userName = getUserName();
                    password = getPassword();
                }
                else {
                    System.out.println("Verifying your details");
                }
                id = admin.generateId();
                System.out.println("Your id is: "+id);
                System.out.println("Your Account have been created successfully");
                loginDetails.put(userName,password);
                validateDetails(id);
                break;
            case 2:
                userName =getUserName();
                password=getPassword();
                if(loginDetails.containsKey(userName)){
                    id =getUserId();
                    validateDetails(id);
                }
                else {
                    System.out.println("Account not found");
                }
                break;
            default:
                System.out.println("Invalid choice");
                break;
        }
    }
    public void validateDetails(int id){
        LoginOperations.accountName=userName;
        if(id>=1 && id<=1000) {
            Librarian userName = new Librarian();
            userName.getLibrarianAccess();
            userName.librarianMenu();
        }
        else if(id>=1001 && id<=2000) {
            Student userName = new Student();
            userName.getStudentAccess();
            userName.studentMenu();
        }
        else{
            System.out.println("Access Denied");
        }
    }
    public static void removeUser(String user){
        loginDetails.remove(user);
        if(user.equals(LoginOperations.accountName)) {
            System.out.println("Your Account have been removed");
            System.exit(0);
        }
        else {
            System.out.println("Account Removed");
        }
    }
    public static void logOut(){
        System.out.println("Thank you for using our library. You have been Logged out successfully");
        new LoginOperations().manageLogin();
    }
    public int getChoice() {
        while(true) {
            System.out.println("Enter your choice");
            userInput= input.nextLine();
            if(!(validate.validateUserChoice(userInput))) {
                System.out.println("Invalid input");
            }
            else {
                break;
            }
        }
        return Integer.parseInt(userInput);
    }
    public String getUserName(){
        while(true) {
            System.out.println("Enter your username");
            name = input.nextLine();
            if(!(validate.validateUserAccountName(name))) {
                System.out.println("Invalid username");
            }
            else {
                break;
            }
        }
        return name;
    }
    public String getPassword() {
        while(true) {
            System.out.println("Enter your password");
            System.out.println("Note: Your password should contain uppercase,lowercase letters,digits ");
            passkey = input.nextLine();
            if(!(validate.validatePassword(passkey))) {
                System.out.println("Invalid password");
            }
            else {
                break;
            }
        }
        return passkey;
    }

    public int getUserId(){
        while(true) {
            System.out.println("Enter your id");
            userId = input.nextLine();
            if(!(validate.validateAccountId(userId))) {
                System.out.println("Invalid id");
            }
            else {
                break;
            }
        }
        return Integer.parseInt(userId);
    }



}
