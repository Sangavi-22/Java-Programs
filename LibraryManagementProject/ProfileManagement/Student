package ProfileManagement;
import Library.LibraryOperations;
import LoginManagement.LoginOperations;
import Payment.PayFine;
import Validation.ValidateInput;
import java.util.Scanner;
public class Student extends ProfileDetails {
    private int borrowedCount=0,studentId;
    private static int studentIdentificationNumber =0;
    private LibraryOperations library;
    private ValidateInput validate=new ValidateInput();

    Scanner input = new Scanner(System.in);
    public Student(){
        studentIdentificationNumber++;
        this.studentId=studentIdentificationNumber;
        System.out.println("Your Student id is: "+this.studentId);
        this.setProfileDetails();
        this.setProfileStatus();
    }
    public void getStudentAccess() {
        library=LibraryOperations.getInstance();
    }
    public void studentMenu() {
        System.out.println("********************Welcome Student!********************");
        System.out.println("Student Menu:\n"+
                           "Enter 1 to view Books\n"+
                           "Enter 2 to borrow Books\n"+
                           "Enter 3 to return Books\n"+
                           "Enter 4 to search Books\n"+
                           "Enter 5 to pay Fine\n"+
                           "Enter 6 to view Profile\n"+
                           "Enter 7 to Delete Account\n"+
                           "Enter 8 to logout");
        int studentActionToPerform =getStudentActionToPerform();
        switch (studentActionToPerform) {
            case 1:
                library.viewBooks();
                studentMenu();
                break;
            case 2:
                this.borrowedCount=this.borrowedCount+1;
                if(this.borrowedCount>5) {
                    System.out.println("You have exceeded the maximum limit of books that can be borrowed");
                }
                else {
                    library.borrowBooks(studentId);
                }
                studentMenu();
                break;
            case 3:
                this.borrowedCount=this.borrowedCount-1;
                library.returnBooks(studentId);
                studentMenu();
                break;
            case 4:
                library.searchBook();
                studentMenu();
                break;
            case 5:
                PayFine fine=new PayFine();
                fine.payFine();
                studentMenu();
                break;
            case 6:
                System.out.println(this.getProfileDetails());
                studentMenu();
                break;
            case 7:
                System.out.println("Enter your userName to delete");
                String user=getUserAccountToDelete();
                LoginOperations.removeUser(user);
                studentMenu();
                break;
            case 8:
                this.setProfileStatus();
                LoginOperations.logOut();
                break;
            default:
                System.out.println("Invalid choice");
                studentMenu();
                break;
        }
    }
    public int getStudentActionToPerform(){
        String userInput;
        while(true) {
            System.out.println("Please enter your choice");
            userInput = input.nextLine();
            if (!(validate.validateUserChoice(userInput))) {
                System.out.println("Invalid input");
            }
            else {
                break;
            }
        }
        return Integer.parseInt(userInput);
    }
    public String getUserAccountToDelete(){
        String inputUserAccountToDelete;
        while(true) {
            System.out.println("Please enter the username");
            inputUserAccountToDelete = input.nextLine();
            if (!(validate.validateUserAccountName(inputUserAccountToDelete))) {
                System.out.println("Invalid input");
            }
            else {
                break;
            }
        }
        return inputUserAccountToDelete;
    }
}
